// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `ios/Classes/prover.h`.
class NativeProverLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeProverLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeProverLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Calculates buffer size to output public signals as json string
  /// @returns PROVER_OK in case of success, and the size of public buffer is written to public_size
  int groth16_public_size_for_zkey_buf(
    ffi.Pointer<ffi.Void> zkey_buffer,
    int zkey_size,
    ffi.Pointer<ffi.Size> public_size,
    ffi.Pointer<ffi.Char> error_msg,
    int error_msg_maxsize,
  ) {
    return _groth16_public_size_for_zkey_buf(
      zkey_buffer,
      zkey_size,
      public_size,
      error_msg,
      error_msg_maxsize,
    );
  }

  late final _groth16_public_size_for_zkey_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong)>>('groth16_public_size_for_zkey_buf');
  late final _groth16_public_size_for_zkey_buf =
      _groth16_public_size_for_zkey_bufPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>, int)>();

  /// groth16_public_size_for_zkey_file calculates minimum buffer size for
  /// JSON-formatted public signals. The calculated buffer size is written
  /// to the public_size variable.
  ///
  /// @return error code:
  /// PROVER_OK (0) - in case of success
  /// PROVER_ERROR - in case of an error, error_msg contains the error message
  int groth16_public_size_for_zkey_file(
    ffi.Pointer<ffi.Char> zkey_fname,
    ffi.Pointer<ffi.UnsignedLong> public_size,
    ffi.Pointer<ffi.Char> error_msg,
    int error_msg_maxsize,
  ) {
    return _groth16_public_size_for_zkey_file(
      zkey_fname,
      public_size,
      error_msg,
      error_msg_maxsize,
    );
  }

  late final _groth16_public_size_for_zkey_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong)>>('groth16_public_size_for_zkey_file');
  late final _groth16_public_size_for_zkey_file =
      _groth16_public_size_for_zkey_filePtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>, int)>();

  /// groth16_prover
  /// @return error code:
  /// PROVER_OK - in case of success
  /// PPOVER_ERROR - in case of an error
  /// PROVER_ERROR_SHORT_BUFFER - in case of a short buffer error, also updates proof_size and public_size with actual proof and public sizess
  int groth16_prover(
    ffi.Pointer<ffi.Void> zkey_buffer,
    int zkey_size,
    ffi.Pointer<ffi.Void> wtns_buffer,
    int wtns_size,
    ffi.Pointer<ffi.Char> proof_buffer,
    ffi.Pointer<ffi.UnsignedLong> proof_size,
    ffi.Pointer<ffi.Char> public_buffer,
    ffi.Pointer<ffi.UnsignedLong> public_size,
    ffi.Pointer<ffi.Char> error_msg,
    int error_msg_maxsize,
  ) {
    return _groth16_prover(
      zkey_buffer,
      zkey_size,
      wtns_buffer,
      wtns_size,
      proof_buffer,
      proof_size,
      public_buffer,
      public_size,
      error_msg,
      error_msg_maxsize,
    );
  }

  late final _groth16_proverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong)>>('groth16_prover');
  late final _groth16_prover = _groth16_proverPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedLong>,
          ffi.Pointer<ffi.Char>,
          int)>();

  /// groth16_prover
  /// @return error code:
  /// PROVER_OK - in case of success
  /// PPOVER_ERROR - in case of an error
  /// PROVER_ERROR_SHORT_BUFFER - in case of a short buffer error, also updates proof_size and public_size with actual proof and public sizess
  int groth16_prover_zkey_file(
    ffi.Pointer<ffi.Char> zkey_file_path,
    ffi.Pointer<ffi.Void> wtns_buffer,
    int wtns_size,
    ffi.Pointer<ffi.Char> proof_buffer,
    ffi.Pointer<ffi.UnsignedLong> proof_size,
    ffi.Pointer<ffi.Char> public_buffer,
    ffi.Pointer<ffi.UnsignedLong> public_size,
    ffi.Pointer<ffi.Char> error_msg,
    int error_msg_maxsize,
  ) {
    return _groth16_prover_zkey_file(
      zkey_file_path,
      wtns_buffer,
      wtns_size,
      proof_buffer,
      proof_size,
      public_buffer,
      public_size,
      error_msg,
      error_msg_maxsize,
    );
  }

  late final _groth16_prover_zkey_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedLong,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedLong)>>('groth16_prover_zkey_file');
  late final _groth16_prover_zkey_file =
      _groth16_prover_zkey_filePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedLong>,
              ffi.Pointer<ffi.Char>,
              int)>();
}

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int PROVER_OK = 0;

const int PROVER_ERROR = 1;

const int PROVER_ERROR_SHORT_BUFFER = 2;

const int PROVER_INVALID_WITNESS_LENGTH = 3;
